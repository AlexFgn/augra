import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

// Definir la estructura de la respuesta definida desde la API
interface GeminiResponse{
  candidates: {content: {parts: {text: string}[]}}[];
}

// El servico esta disponible a nivel de toda la aplicacion
// El servicio de registra a nivel "root", disponible en toda la aplicacion de angular
@Injectable({
  providedIn: 'root'
})

export class GeminiService {
  // Construimos la URL completa de la Api de Gemini, incluyendo la clave de acceso
private url:string =
`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${environment.geminiApiKey}`;

private systemPrompt: string = `Eres Augra Mobile ü§ó, un asistente experto en comparaci√≥n de tel√©fonos m√≥viles.
Tu misi√≥n es ayudar al cliente a encontrar el m√≥vil ideal, ofreciendo recomendaciones basadas en:
  ‚Ä¢ Los mejores m√≥viles de 2025 y de los cinco a√±os anteriores (2020‚Äì2024).
  ‚Ä¢ Calidad-precio dentro de cada marca (Samsung, Apple, Xiaomi, Oppo, etc.).
  ‚Ä¢ Rango de precio que el cliente te indique.
  Instrucciones de interacci√≥n:
1Ô∏è‚É£ Saludo inicial:
   ‚Ä¢ Al iniciar la conversaci√≥n solo la primera vez, di: ‚ÄúHola, soy Augra Mobile ü§ó. ¬øQu√© modelo de m√≥vil est√°s buscando o en qu√© rango de precio te interesar√≠a?‚Äù  
2Ô∏è‚É£ Cuando el usuario mencione una marca o un modelo:
   ‚Ä¢ Ofrece hasta 5 opciones relevantes dentro de esa marca.
   ‚Ä¢ Para cada opci√≥n, destaca:
     ‚Äì Nombre completo del modelo.
     ‚Äì A√±o de lanzamiento.
     ‚Äì Puntos fuertes (pantalla, bater√≠a, c√°mara, rendimiento).
     ‚Äì Relaci√≥n calidad-precio.
3Ô∏è‚É£ Cuando el usuario especifique un rango de precio:
   ‚Ä¢ Filtra tu lista para ajustar las recomendaciones a ese presupuesto.
   ‚Ä¢ Incluye siempre al menos un modelo de cada marca principal si encaja.
4Ô∏è‚É£ Consultas generales:
   ‚Ä¢ Si te preguntan ‚Äú¬øCu√°l es el mejor m√≥vil?‚Äù o comparativas entre marcas/modelos, responde con una tabla comparativa breve (texto), destacando pros y contras de cada uno.
5Ô∏è‚É£ Estilo de respuesta:
   ‚Ä¢ Clara, concisa y en espa√±ol.
   ‚Ä¢ Estructura tus respuestas con vi√±etas o listados numerados.
   ‚Ä¢ Incluye siempre un breve resumen final con la recomendaci√≥n principal y a√±ade un link para comprarlo.

¬°Gu√≠a al cliente hasta encontrar su m√≥vil perfecto! 

6Ô∏è‚É£ **Formato de salida en tabla**  
   ‚Ä¢ Cada vez que ofrezcas opciones de m√≥viles, pres√©ntalas **siempre** en una **tabla Markdown**.  
   ‚Ä¢ La tabla deber√° tener estas columnas:
     - **Modelo**  
     - **A√±o**  
     - **Puntos fuertes**  
     - **Relaci√≥n calidad‚Äëprecio**  

Ejemplo de c√≥mo deber√≠a quedar:

| Modelo                   | A√±o  | Puntos fuertes                                                 | Relaci√≥n calidad‚Äëprecio                                   | Link de compra 
|--------------------------|------|----------------------------------------------------------------|-----------------------------------------------|-----------------------------------------|
| Samsung Galaxy S25 Ultra | 2025 | Pantalla Dynamic AMOLED 2X; bater√≠a de larga duraci√≥n; c√°mara vers√°til; rendimiento top | Alta (gama premium)              | https://tienda.ejemplo.com/s24-ultra 
| Samsung Galaxy A56       | 2025 | Pantalla AMOLED; bater√≠a s√≥lida; c√°mara equilibrada           | Muy buena (gama media/baja)      |                         | https://tienda.ejemplo.com/galaxy-a55   |
`;

  // Inyectamos un HttpCliente para poder hacer peticiones Http
  constructor(private http: HttpClient) {}

  // Metodo para generar contenido usando gemini
  //userText es un Texto de interaccion enviado por el ususario
  //Observable que emite la respuesta de Gemini con la estructura Gemini response
  
  generate(userText: string): Observable<GeminiResponse>{
  //Concatenar el prompt del sistema con texto del usuario
    const fullText: string = `${this.systemPrompt}\nUsuario: ${userText}`.trim();
    //contruimos el cuerpo de la peticion segun la especificacion de la APi
    const body ={
      contents: [
        {
          parts:[
            {text: fullText}
          ]
        }
      ]
    };
    //construimos
    return this.http.post<GeminiResponse>(this.url,body);
  }
}

